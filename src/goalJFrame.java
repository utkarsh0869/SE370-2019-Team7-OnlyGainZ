import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.event.TableModelListener;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author lopez816
 */
public class goalJFrame extends javax.swing.JFrame {
    
    ArrayList<Goals> goals;
    /**
     * Creates new form goalJFrame
     */
    public goalJFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        goals = new ArrayList<Goals>();
        fillGoalTable();
    }
    
    public void saveGoalToFile() {
        try {
            File myFile = new File("textfiles/goals.txt");
            FileWriter filewriter = new FileWriter(myFile, true);

            // This for loop may not be needed because we are only adding one goal
            for(int i = 0; i < goals.size(); i++) {
                filewriter.write(goals.get(i).getGoalAuthor()+"  ");
                filewriter.write(goals.get(i).getGoalDesc()+"  ");
                filewriter.write(goals.get(i).getGoalEndDate()+"  ");
                filewriter.write(goals.get(i).getGoalDifficulty()+"  ");
                filewriter.write(goals.get(i).getGoalType()+"\n");
            }    
            filewriter.flush();
            filewriter.close();
        }    
        catch(IOException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
        
    public void fillGoalTable() {
        DefaultTableModel model = (DefaultTableModel)goalTable.getModel();
        
        File myFile = new File("textfiles/goals.txt");
        try (Scanner myReader = new Scanner(myFile)) {

            while(myReader.hasNextLine()) {
                String ii = myReader.nextLine();
                String [] g = ii.split("  ");
                if(g[0].equals(OnlyGainz.userinfo[3])){
                    model.addRow(new Object [] {g[0], g[1], g[2], g[3], g[4]});
                }
            }
        }   
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    // event listener not finalized
    // instead of doing this we add more columns to the table to replace this checkbox listener
    // the columns we could add include: goal difficulty, who will help with achieving goal, etc.
    
   /*
    public void tableChanged(TableModelEvent e) {
        DefaultTableModel model = (DefaultTableModel)goalTable.getModel();
        String lineToEdit = "";
        int row = e.getFirstRow();
        int statusColumn = e.getColumn();
        for (int i = 0; i < 3; i++) {
            if (i <= 1)
                lineToEdit += goalTable.getModel().getValueAt(row, i).toString() + "  ";
            else 
                lineToEdit += goalTable.getModel().getValueAt(row, i).toString();
        }
        // Boolean.parseBoolean(#string);
        if (statusColumn == 3) {
            try {
                BufferedReader file = new BufferedReader(new FileReader("textfiles/goals.txt"));
                StringBuffer inputBuffer = new StringBuffer();
                String line;
                String inputStr = null;

                while ((line = file.readLine()) != null) {
                    inputBuffer.append(line);
                    inputStr = inputBuffer.toString();

                    boolean checked = (boolean) model.getValueAt(row, statusColumn);
                    if (checked) {
                        inputStr = inputStr.replaceFirst(line, lineToEdit + "  true"); // change status to true
                        System.out.println(true);
                    }  
                    else {
                        inputStr = inputStr.replaceFirst(line, lineToEdit) + "  false"; // change status to false
                        System.out.println(false);
                    }
                    inputBuffer.append('\n');
                }
                file.close();
            }   
                
            catch(Exception i) {
                JOptionPane.showMessageDialog(null, i.getMessage());
            }
        }   
    
    }
    /*
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        goalTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        details = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        endDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox<>();
        difficultyComboBox = new javax.swing.JComboBox<>();
        backButton = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Goal Setter");
        setBackground(new java.awt.Color(102, 204, 255));
        setUndecorated(true);

        goalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Author", "Goal Details", "Deadline", "Difficulty", "Goal Type"
            }
        ));
        goalTable.setGridColor(new java.awt.Color(204, 204, 204));
        goalTable.setRowHeight(40);
        jScrollPane1.setViewportView(goalTable);

        jLabel1.setText("Goal Details: ");

        jLabel2.setText("Deadline: ");

        jLabel3.setText("Add a New Goal: ");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Selected Row");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Goal Difficulty:");

        jLabel5.setText("Goal Type:");

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Type", "Personal", "Physical", "Mental", "Family", "Career" }));

        difficultyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Difficulty", "Easy", "Medium", "Hard", "Extreme" }));

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(51, 51, 51)
                                        .addComponent(jLabel3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(details)
                                                .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(difficultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(91, 91, 91)
                                .addComponent(addButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteButton))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(details, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(difficultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addButton)
                            .addComponent(deleteButton))))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Here we are assuming that the user will not add two of the same goals
        DefaultTableModel model = (DefaultTableModel)goalTable.getModel();
        
        String goalDetails = details.getText();
        String goalEndDate = endDate.getText();
        String goalDifficulty = difficultyComboBox.getSelectedItem().toString();
        String goalType = typeComboBox.getSelectedItem().toString();
   
        String userN = OnlyGainz.userinfo[3]; // global to current user(author)
        
        // add to table  
        if(details.getText().isEmpty() || endDate.getText().isEmpty()|| difficultyComboBox.getSelectedItem() == "Difficulty" ||
                typeComboBox.getSelectedItem() == "Type") {
            JOptionPane.showMessageDialog(null, "Please enter all required fields");
        }
        else {
            model.addRow(new Object[] {userN, goalDetails, goalEndDate, goalDifficulty, goalType}); 
            
            Goals goal = new Goals(userN, goalDetails, goalEndDate, goalDifficulty, goalType);
            goals.add(goal);
            saveGoalToFile();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel)goalTable.getModel();
        String lineToRemove = "";
        
        for (int i = 0; i < 5; i++) {
            if (i <= 3)
                lineToRemove += goalTable.getModel().getValueAt(goalTable.getSelectedRow(), i).toString() + "  ";
            else 
                lineToRemove += goalTable.getModel().getValueAt(goalTable.getSelectedRow(), i).toString();
        }
            
        File inputFile = new File("textfiles/goals.txt");
        File tempFile = new File("tempFile.txt");
        
        // remove the row selected from the goals.txt file
        try {
            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));
            
            String currentLine;
            while((currentLine = reader.readLine()) != null) {
                // trim newline when comparing with lineToRemove
                String trimmedLine = currentLine.trim();
                if(trimmedLine.equals(lineToRemove)) continue;
                    writer.write(currentLine + System.getProperty("line.separator"));
            }
            writer.close(); 
            reader.close(); 
            boolean successful = tempFile.renameTo(inputFile);
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        // remove the row selected from the table
        model.removeRow(goalTable.getSelectedRow());
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new Dashboard().setVisible(true);
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(goalJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(goalJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(goalJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(goalJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new goalJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField details;
    private javax.swing.JComboBox<String> difficultyComboBox;
    private javax.swing.JTextField endDate;
    private javax.swing.JTable goalTable;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> typeComboBox;
    // End of variables declaration//GEN-END:variables
}
